$version Generated by VerilatedVcd $end
$timescale 1s $end
 $scope module TOP $end
  $var wire 1 , clk $end
  $var wire 1 - rst $end
  $var wire 8 . i_seg [7:0] $end
  $var wire 1 / i_rand_flag $end
  $var wire 8 0 o_seg_1 [7:0] $end
  $var wire 8 1 o_seg_0 [7:0] $end
  $var wire 8 2 o_led [7:0] $end
  $var wire 1 3 o_rand_flag $end
  $scope module reg_top $end
   $var wire 1 , clk $end
   $var wire 1 - rst $end
   $var wire 8 . i_seg [7:0] $end
   $var wire 1 / i_rand_flag $end
   $var wire 8 0 o_seg_1 [7:0] $end
   $var wire 8 1 o_seg_0 [7:0] $end
   $var wire 8 2 o_led [7:0] $end
   $var wire 1 3 o_rand_flag $end
   $scope module u_lfsr $end
    $var wire 1 , clk $end
    $var wire 1 - rst $end
    $var wire 8 . i_seg [7:0] $end
    $var wire 1 / i_rand_flag $end
    $var wire 8 2 o_rand [7:0] $end
    $var wire 4 4 count [3:0] $end
    $var wire 8 # o_q [7:0] $end
    $var wire 1 5 o_q_0 $end
    $var wire 1 6 o_q_1 $end
    $scope module u1 $end
     $var wire 1 , clk $end
     $var wire 1 $ i_d $end
     $var wire 1 % o_q $end
    $upscope $end
    $scope module u2 $end
     $var wire 1 , clk $end
     $var wire 1 % i_d $end
     $var wire 1 & o_q $end
    $upscope $end
    $scope module u3 $end
     $var wire 1 , clk $end
     $var wire 1 & i_d $end
     $var wire 1 ' o_q $end
    $upscope $end
    $scope module u4 $end
     $var wire 1 , clk $end
     $var wire 1 ' i_d $end
     $var wire 1 ( o_q $end
    $upscope $end
    $scope module u5 $end
     $var wire 1 , clk $end
     $var wire 1 ( i_d $end
     $var wire 1 ) o_q $end
    $upscope $end
    $scope module u6 $end
     $var wire 1 , clk $end
     $var wire 1 ) i_d $end
     $var wire 1 * o_q $end
    $upscope $end
    $scope module u7 $end
     $var wire 1 , clk $end
     $var wire 1 * i_d $end
     $var wire 1 + o_q $end
    $upscope $end
    $scope module uo $end
     $var wire 1 , clk $end
     $var wire 1 5 i_d $end
     $var wire 1 $ o_q $end
    $upscope $end
   $upscope $end
   $scope module u_seg_hex $end
    $var wire 8 2 i_seg [7:0] $end
    $var wire 8 1 o_seg_0 [7:0] $end
    $var wire 8 0 o_seg_1 [7:0] $end
    $scope module u0_seg $end
     $var wire 4 7 i_seg [3:0] $end
     $var wire 8 1 o_seg [7:0] $end
     $var wire 8 9 num0 [7:0] $end
     $var wire 8 : num1 [7:0] $end
     $var wire 8 ; num2 [7:0] $end
     $var wire 8 < num3 [7:0] $end
     $var wire 8 = num4 [7:0] $end
     $var wire 8 > num5 [7:0] $end
     $var wire 8 ? num6 [7:0] $end
     $var wire 8 @ num7 [7:0] $end
     $var wire 8 A num8 [7:0] $end
     $var wire 8 B num9 [7:0] $end
     $var wire 8 C numa [7:0] $end
     $var wire 8 D numb [7:0] $end
     $var wire 8 E numc [7:0] $end
     $var wire 8 F numd [7:0] $end
     $var wire 8 G nume [7:0] $end
     $var wire 8 H numf [7:0] $end
    $upscope $end
    $scope module u1_seg $end
     $var wire 4 8 i_seg [3:0] $end
     $var wire 8 0 o_seg [7:0] $end
     $var wire 8 9 num0 [7:0] $end
     $var wire 8 : num1 [7:0] $end
     $var wire 8 ; num2 [7:0] $end
     $var wire 8 < num3 [7:0] $end
     $var wire 8 = num4 [7:0] $end
     $var wire 8 > num5 [7:0] $end
     $var wire 8 ? num6 [7:0] $end
     $var wire 8 @ num7 [7:0] $end
     $var wire 8 A num8 [7:0] $end
     $var wire 8 B num9 [7:0] $end
     $var wire 8 C numa [7:0] $end
     $var wire 8 D numb [7:0] $end
     $var wire 8 E numc [7:0] $end
     $var wire 8 F numd [7:0] $end
     $var wire 8 G nume [7:0] $end
     $var wire 8 H numf [7:0] $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#1
b00000000 #
0$
0%
0&
0'
0(
0)
0*
0+
0,
1-
b10011001 .
0/
b00000011 0
b00000011 1
b00000000 2
03
b0000 4
05
06
b0000 7
b0000 8
b11111100 9
b01100000 :
b11011010 ;
b11110010 <
b01100110 =
b10110110 >
b10111110 ?
b11100000 @
b11111110 A
b11100110 B
b11101110 C
b00111110 D
b10011100 E
b01111010 F
b10011110 G
b10001110 H
#2
#3
#4
#5
#6
1/
13
#7
#8
#9
#10
#11
#12
#13
#14
#15
#16
#17
#18
#19
#20
#21
#22
#23
#24
#25
#26
0/
03
#27
#28
#29
#30
#31
#32
#33
#34
#35
#36
#37
#38
#39
#40
#41
#42
#43
#44
#45
#46
